
- MetaspaceObj
 - Metadata
  - Klass
   - InstanceKlass
    - InstanceMirrorKlass
    - InstanceRefKlass
    - InstanceClassLoaderKlass
   - ArrayKlass
    - TypeArrayKlass
    - ObjArrayKlass

- oopDesc
 - instanceOopDesc
 - arrayOopDesc
  - typeArrayOopDesc
  - objArrayOopDesc


- Agent_OnLoad
 - createNewJPLISAgent(vm, &agent);
  - JPLISAgent *agent = allocateJPLISAgent(jvmtienv): 为agent分配内存空间
  - initializeJPLISAgent(agent, vm, jvmtienv)
   - agent: all fields get default value
   - jvmtienv->SetEnvironmentLocalStorage(&(agent->mNormalEnvironment))
   - checkCapabilities(agent): agent->mRedefineAvailable = JNI_TRUE; + agent->mNativeMethodPrefixAvailable = JNI_TRUE;
   - callbacks.VMInit = &eventHandlerVMInit;
   - jvmtienv->SetEventCallbacks(&callbacks, sizeof(callbacks));
   - jvmtienv->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_VM_INIT, NULL /* all threads */);
 - parseArgumentTail(tail, &jarfile, &options)
 - attributes = readAttributes(jarfile)
 - appendClassPath(agent, jarfile)
 - appendBootClassPath(agent, jarfile, bootClassPath)
 - convertCapabilityAtrributes(attributes, agent)
  - addRedefineClassesCapability(agent)
   - agent->mRedefineAdded = JNI_TRUE;
  - retransformableEnvironment(agent)
   - callbacks.ClassFileLoadHook = &eventHandlerClassFileLoadHook;
   - retransformerEnv->SetEventCallbacks(&callbacks, sizeof(callbacks));
   - agent->mRetransformEnvironment.mJVMTIEnv = retransformerEnv;
   - agent->mRetransformEnvironment.mIsRetransformer = JNI_TRUE;
   - retransformerEnv->SetEnvironmentLocalStorage(&(agent->mRetransformEnvironment));
  - addNativeMethodPrefixCapability(agent)
   - agent->mNativeMethodPrefixAdded = JNI_TRUE;
 - recordCommandLineData(agent, premainClass, options)
  - agent->mAgentClassName = ourCopyOfAgentClassName;
  - agent->mOptionsString = ourCopyOfOptionsString;

- eventHandlerVMInit
 - environment = getJPLISEnvironment(jvmtienv)
  - jvmtienv->GetEnvironmentLocalStorage((void**)&environment)
 - processJavaStart(environment->mAgent, jnienv)
  - createInstrumentationImpl(jnienv, agent)
   - implClass      = jnienv->FindClass(JPLIS_INSTRUMENTIMPL_CLASSNAME);
   - localReference = jnienv->NewObject(implClass, constructorID, peerReferenceAsScalar,...);
   - resultImpl     = jnienv->NewGlobalRef(localReference);
   - agent->mInstrumentationImpl = resultImpl;                 // InstrumentationImpl instance
   - agent->mPremainCaller       = premainCallerMethodID;      // InstrumentationImpl.loadClassAndCallPremain()
   - agent->mAgentmainCaller     = agentmainCallerMethodID;    // InstrumentationImpl.loadClassAndCallAgentmain()
   - agent->mTransform           = transformMethodID;          // InstrumentationImpl.transform()
  - setLivePhaseEventHandlers(agent)
   - callbacks.ClassFileLoadHook = &eventHandlerClassFileLoadHook;
   - jvmtienv->SetEventCallbacks(&callbacks, sizeof(callbacks));
   - jvmtienv->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_VM_INIT, NULL /* all threads */);
   - jvmtienv->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_CLASS_FILE_LOAD_HOOK, NULL /* all threads */);
  - startJavaAgent(agent, jnienv, AgentClassName, ...)
   - invokeJavaAgentMainMethod(jnienv, agent->mInstrumentationImpl, agentMainMethod, classNameObject, optionsStringObject);
    - jnienv->CallVoidMethod(instrumentationImpl, mainCallingMethod, className, optionsString);

- eventHandlerClassFileLoadHook
 - environment = getJPLISEnvironment(jvmtienv);
  - jvmtienv->GetEnvironmentLocalStorage((void**)&environment);
 - transformClassFile(environment->mAgent, jnienv, loader, name, class_being_redefined, protectionDomain, class_data_len, class_data, new_class_data_len, new_class_data, environment->mIsRetransformer);
  - classFileBufferObject = jnienv->NewByteArray(class_data_len);
  - jbyte *typedBuffer = (jbyte *) class_data;
  - jnienv->SetByteArrayRegion(classFileBufferObject, 0, class_data_len, typedBuffer);
  - transformedBufferObject = jnienv->CallObjectMethod(agent->mInstrumentationImpl, agent->mTransform, loaderObject, classNameStringObject, classBeingRedefined, protectionDomain, classFileBufferObject, is_retransformer);
  - transformedBufferSize = jnienv->GetArrayLength(transformedBufferObject);
  - (jvmti(agent))->Allocate(transformedBufferSize, &resultBuffer);
  - jnienv->GetByteArrayRegion(transformedBufferObject, 0, transformedBufferSize, (jbyte *) resultBuffer);
  - *new_class_data_len = (transformedBufferSize);
  - *new_class_data = resultBuffer;

- initial
 - agent->mJVM                                      = vm;
 - agent->mNormalEnvironment.mJVMTIEnv              = jvmtienv;
 - agent->mNormalEnvironment.mAgent                 = agent;
 - agent->mNormalEnvironment.mIsRetransformer       = JNI_FALSE;
 - agent->mRetransformEnvironment.mJVMTIEnv         = NULL;        /* NULL until needed */
 - agent->mRetransformEnvironment.mAgent            = agent;
 - agent->mRetransformEnvironment.mIsRetransformer  = JNI_FALSE;   /* JNI_FALSE until mJVMTIEnv is set */
 - agent->mAgentmainCaller                          = NULL;
 - agent->mInstrumentationImpl                      = NULL;
 - agent->mPremainCaller                            = NULL;
 - agent->mTransform                                = NULL;
 - agent->mRedefineAvailable                        = JNI_FALSE;   /* assume no for now */
 - agent->mRedefineAdded                            = JNI_FALSE;
 - agent->mNativeMethodPrefixAvailable              = JNI_FALSE;   /* assume no for now */
 - agent->mNativeMethodPrefixAdded                  = JNI_FALSE;
 - agent->mAgentClassName                           = NULL;
 - agent->mOptionsString                            = NULL;

